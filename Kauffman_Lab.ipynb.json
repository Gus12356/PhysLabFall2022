{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6de5714d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ad5da6d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error in vi from method 2 = 0.008187390956418555\n"
     ]
    }
   ],
   "source": [
    "def rule1(errA,c):\n",
    "    return c*errA\n",
    "\n",
    "def rule2(c,m,A,errA):\n",
    "    errQ = c*m*(A**(m-1))*errA\n",
    "    return errQ\n",
    "\n",
    "def rule3(errA, errB):\n",
    "    errQ = np.sqrt(errA**2 + errB**2)\n",
    "    return errQ\n",
    "\n",
    "def rule4(A,errA,B,errB,m,n,Q):\n",
    "    fracA = errA / A\n",
    "    fracB = errB / B\n",
    "    errQ = Q*(np.sqrt(((m*fracA) **2) + ((n*fracB) **2)))\n",
    "    return errQ\n",
    "             \n",
    "#for method 2 in last weeks lab\n",
    "\n",
    "vi = 3.4125 #m/s\n",
    "deltax = 1.5865 #m\n",
    "errdeltax = .00346 #m\n",
    "m = 1\n",
    "y = 1 #m\n",
    "erry = .002 #m\n",
    "n = .5\n",
    "\n",
    "errvi = rule4(deltax,errdeltax,y,erry,m,n,vi)\n",
    "\n",
    "print('Error in vi from method 2 =', errvi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2205d78b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average is 1.1166666666666667\n",
      "The standard deviation is 0.17950549357115014\n",
      "The error is 0.073282810879294\n"
     ]
    }
   ],
   "source": [
    "x = np.array([1.1, 1.3, 1.4, 0.9, 0.95, 1.05])\n",
    "xavg = np.average(x)\n",
    "xstd = np.std(x)\n",
    "xerr = xstd / np.sqrt(len(x))\n",
    "\n",
    "print('The average is', xavg)\n",
    "print('The standard deviation is', xstd)\n",
    "print('The error is', xerr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6708db3f",
   "metadata": {},
   "source": [
    "Rule 3:\n",
    "\n",
    "$Q = \\sqrt{(\\delta a)^2 + (\\delta b^2)}$\n",
    "\n",
    "Method 2:\n",
    "\n",
    "$v_{i} = \\triangle x \\sqrt{\\frac{g}{2y}} $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7188f9f2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
